package data.scripts.campaign.ui;

import com.fs.starfarer.api.EveryFrameScript;
import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.Script;
import com.fs.starfarer.api.campaign.*;
import com.fs.starfarer.api.campaign.econ.Industry;
import com.fs.starfarer.api.campaign.econ.MarketAPI;
import com.fs.starfarer.api.campaign.rules.MemoryAPI;
import com.fs.starfarer.api.combat.EngagementResultAPI;
import com.fs.starfarer.api.fleet.FleetMemberAPI;
import com.fs.starfarer.api.input.InputEventAPI;
import com.fs.starfarer.api.ui.*;
import com.fs.starfarer.api.util.Misc;
import data.scripts.campaign.UNGP_InGameData;
import data.scripts.campaign.UNGP_Settings;
import data.scripts.campaign.background.UNGP_Background;
import data.scripts.campaign.background.UNGP_BackgroundManager;
import data.scripts.campaign.inherit.UNGP_InheritData;
import data.scripts.campaign.inherit.UNGP_InheritManager;
import data.scripts.campaign.specialist.challenges.UNGP_ChallengeInfo;
import data.scripts.campaign.specialist.challenges.UNGP_ChallengeManager;
import data.scripts.campaign.specialist.intel.UNGP_ChallengeIntel;
import data.scripts.campaign.specialist.intel.UNGP_SpecialistIntel;
import data.scripts.campaign.specialist.rules.UNGP_RulePickListener;
import data.scripts.campaign.specialist.rules.UNGP_RulesManager;
import data.scripts.campaign.specialist.rules.UNGP_RulesManager.URule;
import data.scripts.ungpbackgrounds.UNGP_BackgroundPluginAPI;
import data.scripts.ungpsaves.UNGP_DataSaverAPI;
import data.scripts.ungpsaves.UNGP_DataSaverSettingEntryAPI;
import data.scripts.ungpsaves.impl.UNGP_BlueprintsDataSaver;
import data.scripts.ungpsaves.impl.UNGP_CreditsDataSaver;
import data.scripts.utils.UNGP_Feedback;
import org.lwjgl.input.Keyboard;
import ungp.ui.CheckBoxGroup;
import ungp.ui.HorizontalButtonGroup;
import ungp.ui.SettingEntry;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static data.scripts.campaign.UNGP_Settings.d_i18n;
import static data.scripts.campaign.specialist.UNGP_SpecialistSettings.Difficulty;
import static data.scripts.campaign.specialist.UNGP_SpecialistSettings.rulesMeetCondition;

public class UNGP_InteractionDialog implements InteractionDialogPlugin {
    private enum OptionID {
        CHECK_INHERIT_SLOTS,
        CHECK_RECORD_SLOTS,
        HELP,

        CHOOSE_INHERIT_SLOT_0,
        CHOOSE_INHERIT_SLOT_1,
        CHOOSE_INHERIT_SLOT_2,
        PICK_RULES,
        INHERIT,
        INHERIT_SETTINGS,

        //        START_RECORD,
        CHOOSE_RECORD_SLOT_0,
        CHOOSE_RECORD_SLOT_1,
        CHOOSE_RECORD_SLOT_2,

        BACK_TO_MENU,
        LEAVE
    }

    private InteractionDialogAPI dialog;
    private TextPanelAPI textPanel;
    private OptionPanelAPI options;
    private VisualPanelAPI visual;
    private UNGP_InteractionPanelPlugin uiPanelPlugin;

    private UNGP_InGameData inGameData;

    private UNGP_InheritData pickedInheritData;
    private OptionID choseInheritSlotOptionID = null;

    /**
     * While dialog is loaded, the data will be generated by the current inGameData
     */
    private UNGP_InheritData pregenInheritData;
    private boolean isSpecialistMode = false;

    private InheritSettingEntry<Difficulty> settingEntry_difficulty = new InheritSettingEntry<Difficulty>(null, Difficulty.values().length + 1) {
        @Override
        public void initParams(int optionSize) {
            entryTitle = d_i18n.get("hardmodeLevel");
            entryTitleColor = Misc.getNegativeHighlightColor();
            for (int i = 0; i < optionSize; i++) {
                Difficulty difficulty;
                if (i == 0) {
                    difficulty = null;
                    optionNames[i] = "/";
                    optionBaseColor[i] = Misc.getBasePlayerColor();
                    optionDarkColor[i] = Misc.getDarkPlayerColor();
                    optionBrightColor[i] = Misc.getBrightPlayerColor();
                } else {
                    difficulty = Difficulty.values()[i - 1];
                    optionNames[i] = difficulty.name;
                    optionBaseColor[i] = difficulty.color;
                    optionDarkColor[i] = difficulty.color.darker();
                    optionBrightColor[i] = difficulty.color.brighter();
                }
                optionValues[i] = difficulty;
            }
        }

        @Override
        protected void addTipToOption(TooltipMakerAPI tooltip, Object option) {
            Difficulty difficulty = (Difficulty) option;
            tooltip.addTooltipToPrevious(new DifficultyTooltipCreator(difficulty), TooltipMakerAPI.TooltipLocation.BELOW);
        }
    };

    private List<URule> pickedRules = new ArrayList<>();
    private UNGP_Background pickedBackground;
    private CheckBoxGroup backgroundCheckBoxGroup;


    public UNGP_InteractionDialog(UNGP_InGameData inGameData) {
        this.inGameData = inGameData;
    }

    @Override
    public void init(InteractionDialogAPI dialog) {
        this.dialog = dialog;
        dialog.setPromptText("");
        dialog.setBackgroundDimAmount(0.4f);
        textPanel = dialog.getTextPanel();
        options = dialog.getOptionPanel();
        visual = dialog.getVisualPanel();

        pregenInheritData = UNGP_InheritData.createInheritData(inGameData);
        UNGP_InheritManager.loadAllSlots();

        // The right view of the interaction dialog
        uiPanelPlugin = new UNGP_InteractionPanelPlugin();
        uiPanelPlugin.update(visual);
        initMenu();
        dialog.setOptionOnEscape(null, OptionID.LEAVE);
    }

    /**
     * The beginning of the page.
     */
    private void initMenu() {
        textPanel.addPara(d_i18n.get("menu"));
        options.addOption(d_i18n.get("checkInherit"), OptionID.CHECK_INHERIT_SLOTS);
        options.addOption(d_i18n.get("checkRecord"), OptionID.CHECK_RECORD_SLOTS);
        if (!inGameData.isInherited() && inGameData.isPassedInheritTime()) {
            textPanel.addPara(d_i18n.get("hasPassedTime"), Misc.getNegativeHighlightColor());
        }
        if (!inGameData.couldStartRecord()) {
            options.setEnabled(OptionID.CHECK_RECORD_SLOTS, false);
            if (inGameData.isRecorded()) {
                textPanel.addPara(d_i18n.get("hasRecorded"), Misc.getNegativeHighlightColor());
            }
            if (!UNGP_Settings.reachMaxLevel()) {
                textPanel.addPara(d_i18n.get("notMaxLevel"), Misc.getNegativeHighlightColor());
            }
        }
        TooltipMakerAPI toRecordInfo = textPanel.beginTooltip();
        Difficulty difficulty = null;
        if (inGameData.isHardMode()) {
            difficulty = inGameData.getDifficulty();
        }
        pregenInheritData.addRecordTooltip(toRecordInfo, difficulty);
        textPanel.addTooltip();
        options.addOption(d_i18n.get("help"), OptionID.HELP);
        addLeaveButton();
    }

    /**
     * 选择继承槽位
     */
    private void optionSelectedChooseInherit(OptionID option) {
        int slotID = 0;
        switch (option) {
            case CHOOSE_INHERIT_SLOT_0:
                break;
            case CHOOSE_INHERIT_SLOT_1:
                slotID = 1;
                break;
            case CHOOSE_INHERIT_SLOT_2:
                slotID = 2;
                break;
        }
        pickedInheritData = UNGP_InheritManager.getDataFromSlot(slotID);
        Color nC = Misc.getNegativeHighlightColor();
        if (pickedInheritData != null) {
            choseInheritSlotOptionID = option;
            TooltipMakerAPI inheritDataInfo = textPanel.beginTooltip();
            pickedInheritData.addInheritTooltip(inheritDataInfo);
            textPanel.addTooltip();

            //如果没有继承过或者没有超过时限
            if (!inGameData.isPassedInheritTime() && !inGameData.isInherited()) {
                // 继承选项
                String settingOptionStr = d_i18n.get("startSetting");
                options.addOption(settingOptionStr, OptionID.INHERIT_SETTINGS);
                options.setShortcut(OptionID.INHERIT_SETTINGS, Keyboard.KEY_S, false, false, false, true);

                if (isSpecialistMode) {
                    options.addOption(d_i18n.get("rulepick_button") + (UNGP_ChallengeManager.isDifficultyEnough(settingEntry_difficulty.getValue()) ?
                                                                       d_i18n.get("rulepick_couldChallenge") : ""), OptionID.PICK_RULES);
                    options.setShortcut(OptionID.PICK_RULES, Keyboard.KEY_R, false, false, false, true);
                    pickedRules.clear();
                }

                options.addOption(d_i18n.get("startInherit"), OptionID.INHERIT);
                options.setShortcut(OptionID.INHERIT, Keyboard.KEY_SPACE, false, false, false, true);
                updateOptionsFromSettings();
            } else {
                if (inGameData.isInherited()) {
                    textPanel.addPara(d_i18n.get("hasInherited"), nC);
                } else {
                    textPanel.addPara(d_i18n.get("hasPassedTime"), nC);
                }
            }
        } else {
            textPanel.addPara(d_i18n.get("noInherit"), nC);
        }
    }

    private void saveRecordByChosenOption(UNGP_InheritData dataToRecord, OptionID option) {
        int slotID = 0;
        switch (option) {
            case CHOOSE_RECORD_SLOT_0:
                break;
            case CHOOSE_RECORD_SLOT_1:
                slotID = 1;
                break;
            case CHOOSE_RECORD_SLOT_2:
                slotID = 2;
                break;
        }
        UNGP_InheritManager.saveDataToSlot(dataToRecord, slotID);
    }

    @Override
    public void optionSelected(String optionText, Object optionData) {
        final OptionID selectedOption = (OptionID) optionData;
        if (selectedOption != OptionID.PICK_RULES) {
            options.clearOptions();
            textPanel.clear();
            uiPanelPlugin.update(visual);
        }
        switch (selectedOption) {
            case CHECK_INHERIT_SLOTS: {
                textPanel.addPara(d_i18n.get("checkInherit"));
                textPanel.addPara(d_i18n.get("checkInheritSlot"));
                UNGP_InheritData curSlot = UNGP_InheritManager.InheritData_slot0;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_INHERIT_SLOT_0);
                    options.setEnabled(OptionID.CHOOSE_INHERIT_SLOT_0, false);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_INHERIT_SLOT_0, curSlot.getColorByCycle(), null);
                }
                curSlot = UNGP_InheritManager.InheritData_slot1;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_INHERIT_SLOT_1);
                    options.setEnabled(OptionID.CHOOSE_INHERIT_SLOT_1, false);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_INHERIT_SLOT_1, curSlot.getColorByCycle(), null);
                }
                curSlot = UNGP_InheritManager.InheritData_slot2;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_INHERIT_SLOT_2);
                    options.setEnabled(OptionID.CHOOSE_INHERIT_SLOT_2, false);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_INHERIT_SLOT_2, curSlot.getColorByCycle(), null);
                }
                resetSettings();
                addBackButton(OptionID.BACK_TO_MENU);
            }
            break;
            case CHOOSE_INHERIT_SLOT_0:
            case CHOOSE_INHERIT_SLOT_1:
            case CHOOSE_INHERIT_SLOT_2:
                optionSelectedChooseInherit(selectedOption);
                addBackButton(OptionID.CHECK_INHERIT_SLOTS);
                break;
            case CHECK_RECORD_SLOTS: {
                TooltipMakerAPI recordInfo = textPanel.beginTooltip();
                textPanel.addPara(d_i18n.get("recordInfo"));
                pregenInheritData.addRecordTooltip(recordInfo, inGameData.getDifficulty());
                textPanel.addTooltip();
                textPanel.addPara(d_i18n.get("checkRecordSlot"));
                // 三个重生槽位
                UNGP_InheritData curSlot = UNGP_InheritManager.InheritData_slot0;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_RECORD_SLOT_0);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_RECORD_SLOT_0, curSlot.getColorByCycle(), null);
                }
                curSlot = UNGP_InheritManager.InheritData_slot1;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_RECORD_SLOT_1);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_RECORD_SLOT_1, curSlot.getColorByCycle(), null);
                }
                curSlot = UNGP_InheritManager.InheritData_slot2;
                if (curSlot == null) {
                    options.addOption(d_i18n.get("emptySlot"), OptionID.CHOOSE_RECORD_SLOT_2);
                } else {
                    int curCycle = Math.max(0, curSlot.cycle);
                    options.addOption(curSlot.getPrefixByCycle() + d_i18n.format("slotDes", curCycle + "", curSlot.lastPlayerName)
                            , OptionID.CHOOSE_RECORD_SLOT_2, curSlot.getColorByCycle(), null);
                }
                addBackButton(OptionID.BACK_TO_MENU);
            }
            break;
            case HELP:
                textPanel.addPara(d_i18n.get("helpInfo"));
                addBackButton(OptionID.BACK_TO_MENU);
                break;
            case PICK_RULES:
                final List<URule> oldList = new ArrayList<>(pickedRules);
                pickedRules.clear();
                final Difficulty difficulty = settingEntry_difficulty.getValue();
                UNGP_RulesManager.setStaticDifficulty(difficulty);
                UNGP_RulePickListener pickListener = new UNGP_RulePickListener(pickedRules,
                                                                               pickedInheritData.completedChallenges,
                                                                               difficulty, new Script() {
                    @Override
                    public void run() {
                        setSpecialistModeToolTip();
                        uiPanelPlugin.update(visual);
                        TooltipMakerAPI tooltip = uiPanelPlugin.beginTooltip(0f, false);
                        tooltip.addPara(d_i18n.get("hardmodeDes"), Misc.getHighlightColor(), 0f);
                        uiPanelPlugin.addTooltip(20f, tooltip);
                        tooltip = uiPanelPlugin.beginTooltip(300f, true);
                        for (URule rule : pickedRules) {
                            TooltipMakerAPI imageMaker = tooltip.beginImageWithText(rule.getSpritePath(), 32f);
                            imageMaker.addPara(rule.getName(), rule.getCorrectColor(), 0f);
                            rule.addDesc(imageMaker, 0f);
                            tooltip.addImageWithText(3f);
                        }
                        uiPanelPlugin.addTooltip(300f, tooltip);
                        tooltip = uiPanelPlugin.beginTooltip(10f, false);
                        // 如果满足规则
                        if (!rulesMeetCondition(pickedRules, difficulty)) {
                            tooltip.setParaOrbitronLarge();
                            tooltip.addPara(d_i18n.get("rulepick_notMeet"), Misc.getNegativeHighlightColor(), 5f);
                            tooltip.setParaFontDefault();
                            uiPanelPlugin.addTooltip(10f, tooltip);

                        } else {
                            List<UNGP_ChallengeInfo> runnableChallenges = UNGP_ChallengeManager.getRunnableChallenges(difficulty, pickedRules, pickedInheritData.completedChallenges);
                            if (!runnableChallenges.isEmpty()) {
                                tooltip.addPara(d_i18n.get("rulepick_runnableChallenges"), Misc.getHighlightColor(), 10f);
                                uiPanelPlugin.addTooltip(20f, tooltip);
                                tooltip = uiPanelPlugin.beginTooltip(300f, true);
                                for (UNGP_ChallengeInfo challenge : runnableChallenges) {
                                    challenge.createTooltip(tooltip, 5f, 0);
                                }
                                uiPanelPlugin.addTooltip(300f, tooltip);
                            }
                        }
//                        textPanel.addTooltip();
                    }
                }, new Script() {
                    @Override
                    public void run() {
                        pickedRules.addAll(oldList);
                    }
                });
                pickListener.showCargoPickerDialog(dialog);
                break;
            case INHERIT:
                inherit();
                addLeaveButton();
                break;
            case CHOOSE_RECORD_SLOT_0:
            case CHOOSE_RECORD_SLOT_1:
            case CHOOSE_RECORD_SLOT_2:
                dialog.showCustomDialog(720f, 160f, new RecordDialogDelegate(selectedOption));
                addLeaveButton();
                break;
            case BACK_TO_MENU:
                initMenu();
                break;
            case LEAVE:
                UNGP_InheritManager.clearSlots();
                dialog.dismiss();
                break;
            case INHERIT_SETTINGS:
                float width = Global.getSettings().getScreenWidth();
                float height = Global.getSettings().getScreenHeight();
                width = width < 800 ? width : 800;
                height = height < 600 ? height : 600;
                dialog.showCustomDialog(width, height, new InheritOptionsDelegate());
                break;
            default:
                break;
        }

    }

    /**
     * 继承重生点
     */
    private void inherit() {
        UNGP_BackgroundPluginAPI plugin = pickedBackground.getPlugin();
        float inherit_creditsFactor = plugin.getInheritCreditsFactor();
        float inherit_bpsFactor = plugin.getInheritBlueprintsFactor();

        Map<String, Object> dataSaverParams = new HashMap<>();
        dataSaverParams.put("inheritCreditsFactor", inherit_creditsFactor);
        dataSaverParams.put("inheritBPFactor", inherit_bpsFactor);
        dataSaverParams.put("background", pickedBackground);
        for (UNGP_DataSaverAPI dataSaver : pickedInheritData.dataSavers) {
            TooltipMakerAPI tooltip = textPanel.beginTooltip();
            dataSaver.startInheritDataFromSaver(tooltip, dataSaverParams);
            textPanel.addTooltip();
        }

        TooltipMakerAPI tooltip = textPanel.beginTooltip();
        plugin.afterConfirm(pickedInheritData);
        plugin.addAfterConfirmTooltip(tooltip, pickedInheritData);
        UNGP_BackgroundManager.setPlayerBackground(pickedBackground);
        textPanel.addTooltip();

        textPanel.setFontInsignia();

        if (isSpecialistMode)
            textPanel.addPara(d_i18n.get("hardModeYes"), Misc.getNegativeHighlightColor());

        inGameData.setCurCycle(pickedInheritData.cycle);
        inGameData.setInherited(true);
        inGameData.setHardMode(isSpecialistMode);
        inGameData.setCompletedChallenges(pickedInheritData.completedChallenges);
        if (isSpecialistMode) {
            inGameData.setDifficulty(settingEntry_difficulty.getValue());
            inGameData.saveActivatedRules(pickedRules);
            UNGP_Feedback.setFeedBackList(pickedRules);
            final UNGP_SpecialistIntel intel = new UNGP_SpecialistIntel();
            Global.getSector().getIntelManager().addIntel(intel, false, textPanel);
            UNGP_ChallengeIntel challengeIntel = UNGP_ChallengeManager.confirmChallenges(inGameData);
            if (challengeIntel != null) {
                Global.getSector().getIntelManager().addIntelToTextPanel(challengeIntel, textPanel);
            }
            UNGP_RulesManager.updateRulesCache();
            // Open the specialist intel
            Global.getSector().addTransientScript(new EveryFrameScript() {
                private float elapsed = 0f;
                private boolean isDone = false;

                @Override
                public boolean isDone() {
                    return isDone;
                }

                @Override
                public boolean runWhilePaused() {
                    return false;
                }

                @Override
                public void advance(float amount) {
                    if (isDone()) return;
                    elapsed += amount;
                    if (elapsed > 0.1f) {
                        isDone = true;
                        Global.getSector().getCampaignUI().showCoreUITab(CoreUITabId.INTEL, intel);
                        Global.getSector().removeTransientScript(this);
                    }
                }
            });
        }
    }

    /**
     * 记录重生点
     *
     * @param option
     */
    private void record(OptionID option) {
        inGameData.setRecorded(true);
        saveRecordByChosenOption(pregenInheritData, option);
        Global.getSoundPlayer().playUISound("ui_rep_raise", 1, 1);
        textPanel.addPara(d_i18n.get("recordSuccess"));
    }

    @Override
    public void optionMousedOver(String optionText, Object optionData) {

    }

    private void setSpecialistModeToolTip() {
        if (options.hasOption(OptionID.INHERIT)) {
            if (!pickedRules.isEmpty()) {
                String[] ruleNames = new String[pickedRules.size()];
                Color[] ruleColors = new Color[pickedRules.size()];
                StringBuilder result = new StringBuilder(d_i18n.get("hardmodeDes"));
                for (int i = 0; i < pickedRules.size(); i++) {
                    URule rule = pickedRules.get(i);
                    result.append("\n  ");
                    result.append(rule.getName());
                    ruleNames[i] = rule.getName();
                    ruleColors[i] = rule.getCorrectColor();
                }
                options.setTooltip(OptionID.INHERIT, result.toString());
                options.setTooltipHighlights(OptionID.INHERIT, ruleNames);
                options.setTooltipHighlightColors(OptionID.INHERIT, ruleColors);
            }
        }
    }

    @Override
    public void advance(float amount) {
        if (isSpecialistMode && options.hasOption(OptionID.INHERIT)) {
            options.setEnabled(OptionID.INHERIT, rulesMeetCondition(pickedRules, settingEntry_difficulty.getValue()));
        }
    }

    /**
     * 继承选项
     */
    private void updateOptionsFromSettings() {
        if (options.hasOption(OptionID.INHERIT)) {

            float inherit_creditsFactor = 0f;
            float inherit_bpsFactor = 0f;
            if (pickedBackground != null && pickedBackground.getPlugin() != null) {
                inherit_creditsFactor = pickedBackground.getPlugin().getInheritCreditsFactor();
                inherit_bpsFactor = pickedBackground.getPlugin().getInheritBlueprintsFactor();
            }

            int bpInheritGeneratedByDataSaver = 0;
            int creditsInheritGeneratedByDataSaver = 0;
            for (UNGP_DataSaverAPI dataSaver : pickedInheritData.dataSavers) {
                if (dataSaver instanceof UNGP_BlueprintsDataSaver) {
                    UNGP_BlueprintsDataSaver blueprintsDataSaver = (UNGP_BlueprintsDataSaver) dataSaver;
                    bpInheritGeneratedByDataSaver = (int) ((blueprintsDataSaver.ships.size() +
                            blueprintsDataSaver.fighters.size() +
                            blueprintsDataSaver.weapons.size() +
                            blueprintsDataSaver.hullmods.size())
                            * inherit_bpsFactor);
                }
                if (dataSaver instanceof UNGP_CreditsDataSaver) {
                    UNGP_CreditsDataSaver creditsDataSaver = (UNGP_CreditsDataSaver) dataSaver;
                    creditsInheritGeneratedByDataSaver = (int) (creditsDataSaver.credits * inherit_creditsFactor);
                }
            }
            final int bpInherited = bpInheritGeneratedByDataSaver;
            final int creditsInherited = creditsInheritGeneratedByDataSaver;

            final boolean isSpecialistMode = this.isSpecialistMode;
            final Difficulty difficulty = settingEntry_difficulty.getValue();

            TooltipMakerAPI tooltip = textPanel.beginTooltip();
            TooltipMakerAPI section = tooltip.beginImageWithText("graphics/icons/reports/storage24.png", 24f);
            section.addPara(d_i18n.get("inheritOptions"), Misc.getBasePlayerColor(), 0f);
            tooltip.addImageWithText(5f);
            tooltip.setBulletedListMode("       ");
            // background;
            if (pickedBackground != null) {
                tooltip.addPara(pickedBackground.getName(), pickedBackground.getNameColor(), 10f);
                tooltip.addSpacer(5f);
                tooltip.setBulletedListMode("       " + "       -");
                pickedBackground.addOverallBonusTooltip(tooltip, pickedInheritData, false);
            }
            tooltip.setBulletedListMode("       ");
            if (difficulty != null) {
                tooltip.addPara(d_i18n.get("hardmodeLevel") + ": %s", 5f, difficulty.color, difficulty.name);
            }
            tooltip.setBulletedListMode(null);
            textPanel.addTooltip();
            // 确认
            options.addOptionConfirmation(OptionID.INHERIT, new CustomStoryDialogDelegate() {
                @Override
                public String getTitle() {
                    return d_i18n.get("startInherit");
                }

                @Override
                public void createDescription(TooltipMakerAPI info) {
                    float pad = 10f;
                    String credits = Misc.getDGSCredits(creditsInherited);
                    Color hl = Misc.getHighlightColor();
                    Color negative = Misc.getNegativeHighlightColor();
                    TooltipMakerAPI backgroundTip = info.beginImageWithText(pickedBackground.getSpritePath(), 64f);
                    backgroundTip.setParaOrbitronLarge();
                    backgroundTip.addPara(pickedBackground.getName(), pickedBackground.getNameColor(), 0f);
                    backgroundTip.setParaFontDefault();
                    backgroundTip.addSpacer(5f);
                    pickedBackground.addOverallBonusTooltip(backgroundTip, pickedInheritData, false);
                    info.addImageWithText(0f);
                    info.addSpacer(pad);
                    info.addPara(d_i18n.get("inheritConfirmInfo0"), 0f, hl, credits, "" + bpInherited);
                    info.addSpacer(pad);
                    if (difficulty != null && isSpecialistMode) {
                        info.addPara(d_i18n.get("inheritConfirmInfo1"), negative, 0f).setAlignment(Alignment.MID);
                        info.addSectionHeading(d_i18n.format("rulepick_level", difficulty.name), hl, Misc.scaleAlpha(negative, 0.2f), Alignment.MID, pad * 0.5f);
                        float width = info.getPrev().getPosition().getWidth();
                        int ruleSize = pickedRules.size();
                        int itemsPerRow = (int) (width / 64f);
                        int page = Math.max(0, ruleSize - 1) / itemsPerRow;

                        for (int i = 0; i <= page; i++) {
                            List<String> ruleSprites = new ArrayList<>();
                            for (int j = i * itemsPerRow; j < (i + 1) * itemsPerRow; j++) {
                                if (j < ruleSize) {
                                    ruleSprites.add(pickedRules.get(j).getSpritePath());
                                }
                            }
                            if (!ruleSprites.isEmpty()) {
                                String[] array = ruleSprites.toArray(new String[0]);
                                info.addImages(width, 64f, 0f, 4f, array);
                            }
                        }
                    }
                }
            });
        }
    }

    @Override
    public void backFromEngagement(EngagementResultAPI battleResult) {

    }

    private void addLeaveButton() {
        options.addOption(d_i18n.get("leave"), OptionID.LEAVE);
    }

    private void addBackButton(OptionID warpOption) {
        options.addOption(d_i18n.get("back"), warpOption);
    }

    @Override
    public Object getContext() {
        return null;
    }

    @Override
    public Map<String, MemoryAPI> getMemoryMap() {
        return null;
    }

    public void resetSettings() {
        settingEntry_difficulty.reset();
//        settingEntry_inheritBPsRatio.reset();
//        settingEntry_inheritCreditsRatio.reset();
        pickedBackground = UNGP_BackgroundManager.getDefaultBackground();
        backgroundCheckBoxGroup = null;
        isSpecialistMode = false;
        pickedRules.clear();
    }

    private static class DifficultyTooltipCreator implements TooltipMakerAPI.TooltipCreator {
        private Difficulty difficulty;

        public DifficultyTooltipCreator(Difficulty difficulty) {
            this.difficulty = difficulty;
        }

        @Override
        public boolean isTooltipExpandable(Object tooltipParam) {
            return false;
        }

        @Override
        public float getTooltipWidth(Object tooltipParam) {
            return 200f;
        }

        @Override
        public void createTooltip(TooltipMakerAPI tooltip, boolean expanded, Object tooltipParam) {
            if (difficulty == null) {
                tooltip.addPara(d_i18n.get("difficulty_desc_null"), 0);
            } else {
                Color hl = Misc.getHighlightColor();
                tooltip.addPara(d_i18n.get("difficulty_desc_base") + "%s / %s", 0f, hl,
                                difficulty.minRules + "",
                                difficulty.maxRules + "");
                tooltip.addPara(d_i18n.get("difficulty_desc_value") + "%s", 0f, hl,
                                (int) (difficulty.extraValueMultiplier * 100f) + "%");
                if (UNGP_ChallengeManager.isDifficultyEnough(difficulty)) {
                    tooltip.addPara(d_i18n.get("difficulty_desc_max"), hl, 5f);
                }
            }
        }
    }

    private class InheritOptionsDelegate implements CustomDialogDelegate {

        @Override
        public void createCustomDialog(CustomPanelAPI panel) {
            float width = panel.getPosition().getWidth();
            float height = panel.getPosition().getHeight();
            float pad = 5f;


            float backgroundHeight = height * 0.8f;
            float extraOptionsHeight = height - backgroundHeight;
            float backgroundTitleHeight = 30f;

            UNGP_Background previousBackground = null;
            if (pickedBackground != null) {
                previousBackground = pickedBackground;
            }
            backgroundCheckBoxGroup = new CheckBoxGroup();

            TooltipMakerAPI backgroundTitleTip = panel.createUIElement(width, backgroundTitleHeight, false);
            backgroundTitleTip.setParaOrbitronLarge();
            backgroundTitleTip.addPara(d_i18n.get("inherit_choose_background"), Misc.getBasePlayerColor(), 0);
            panel.addUIElement(backgroundTitleTip).inTL(0f, 0f);

            TooltipMakerAPI backgroundTip = panel.createUIElement(width, backgroundHeight - backgroundTitleHeight, true);
            backgroundTip.setParaOrbitronLarge();

            final float backgroundBoxWidth = width - 10f;
            float spacerHeight = 5f;
            List<UNGP_Background> allBackgrounds = UNGP_BackgroundManager.getSortedBackgroundsCopy();
            for (final UNGP_Background background : allBackgrounds) {
                ButtonAPI checkbox = backgroundTip.addAreaCheckbox("", null, Misc.getBasePlayerColor(), Misc.getDarkPlayerColor(), Misc.getBrightPlayerColor(), 0, 0, 0f, true);
                backgroundTip.addTooltipToPrevious(new UNGP_Background.BackgroundTooltipCreator(background, pickedInheritData, backgroundBoxWidth - 20f),
                                                   TooltipMakerAPI.TooltipLocation.BELOW);
                TooltipMakerAPI imageWithText = backgroundTip.beginImageWithText(background.getSpritePath(), 64f);
                imageWithText.setParaOrbitronLarge();
                imageWithText.addPara(background.getName(), background.getNameColor(), 10f);
                imageWithText.getPrev().getPosition().setXAlignOffset(7f);
                imageWithText.setParaFontDefault();
                imageWithText.addPara(background.getShortDescription(), 5f);
                imageWithText.addSpacer(10f);
                backgroundTip.addImageWithText(spacerHeight);
                PositionAPI imageWithTextPosition = backgroundTip.getPrev().getPosition();
                float imageWithTextHeight = imageWithTextPosition.getHeight();
                float imageWithTextWidth = imageWithTextPosition.getWidth();
                float imageWithTextXOffset = 7f;
                backgroundTip.addSpacer(spacerHeight);
                imageWithTextPosition.setXAlignOffset(imageWithTextXOffset);
                imageWithTextPosition.setSize(imageWithTextWidth - 15f, imageWithTextHeight);
                checkbox.getPosition().setSize(backgroundBoxWidth, imageWithTextHeight + spacerHeight * 2f);
                imageWithTextPosition.setYAlignOffset(imageWithTextHeight + spacerHeight);
                backgroundTip.addSpacer(0f).getPosition().setXAlignOffset(-imageWithTextXOffset);
                backgroundCheckBoxGroup.addCheckBox(checkbox, background);
            }
            backgroundTip.addSpacer(0f);
            panel.addUIElement(backgroundTip).inTL(0f, backgroundTitleHeight);

            TooltipMakerAPI tooltip = panel.createUIElement(width, extraOptionsHeight, false);
            tooltip.setParaOrbitronLarge();
            tooltip.setAreaCheckboxFont(Fonts.ORBITRON_24AA);
            tooltip.addSpacer(10f);

            if (previousBackground != null) {
                backgroundCheckBoxGroup.tryCheckValue(previousBackground);
            } else {
                backgroundCheckBoxGroup.tryCheckValue(UNGP_BackgroundManager.getDefaultBackground());
            }

//            settingEntry_inheritCreditsRatio.addEntry(tooltip, width);
//            tooltip.addSpacer(pad);
//            settingEntry_inheritBPsRatio.addEntry(tooltip, width);
//            tooltip.addSpacer(40f - pad);
            settingEntry_difficulty.addEntry(tooltip, width);
            panel.addUIElement(tooltip).inTL(0f, backgroundHeight);
        }


        @Override
        public boolean hasCancelButton() {
            return true;
        }

        @Override
        public String getConfirmText() {
            return null;
        }

        @Override
        public String getCancelText() {
            return null;
        }

        @Override
        public void customDialogConfirm() {
//            settingEntry_inheritCreditsRatio.confirmValue();
//            settingEntry_inheritBPsRatio.confirmValue();
            if (backgroundCheckBoxGroup != null)
                pickedBackground = (UNGP_Background) backgroundCheckBoxGroup.getCheckedValue();
            Difficulty difficulty = settingEntry_difficulty.confirmValue();
            isSpecialistMode = difficulty != null;
            optionSelected(null, choseInheritSlotOptionID);
        }

        @Override
        public void customDialogCancel() {
//            settingEntry_inheritCreditsRatio.cancelConfirm();
//            settingEntry_inheritBPsRatio.cancelConfirm();
            settingEntry_difficulty.cancelConfirm();
            optionSelected(null, choseInheritSlotOptionID);
        }

        @Override
        public CustomUIPanelPlugin getCustomPanelPlugin() {
            return new CustomUIPanelPlugin() {
                @Override
                public void positionChanged(PositionAPI position) {

                }

                @Override
                public void renderBelow(float alphaMult) {

                }

                @Override
                public void render(float alphaMult) {

                }

                @Override
                public void advance(float amount) {
//                    settingEntry_inheritBPsRatio.advance(amount);
//                    settingEntry_inheritCreditsRatio.advance(amount);
                    if (backgroundCheckBoxGroup != null)
                        backgroundCheckBoxGroup.updateCheck();
                    settingEntry_difficulty.advance(amount);
                }

                @Override
                public void processInput(List<InputEventAPI> events) {

                }
            };
        }
    }

    private class CustomStoryDialogDelegate extends BaseStoryPointActionDelegate {
        @Override
        public boolean withDescription() {
            return true;
        }

        @Override
        public boolean withSPInfo() {
            return false;
        }

        @Override
        public String getLogText() {
            return null;
        }

        @Override
        public float getBonusXPFraction() {
            return 0;
        }

        @Override
        public TextPanelAPI getTextPanel() {
            if (dialog == null) return null;
            return textPanel;
        }

        @Override
        public String getConfirmSoundId() {
            return "ui_acquired_blueprint";
        }

        @Override
        public int getRequiredStoryPoints() {
            return 0;
        }
    }

    /**
     * Used while saving.
     */
    private class RecordDialogDelegate implements CustomDialogDelegate {
        private ButtonAPI btn_recordCargo;
        private ButtonAPI btn_recordShip;
        private ButtonAPI btn_recordColony;

        private OptionID selectedOption;

        public RecordDialogDelegate(OptionID selectedOption) {
            this.selectedOption = selectedOption;
        }

        @Override
        public void createCustomDialog(CustomPanelAPI panel) {
            float width = panel.getPosition().getWidth();
            float height = panel.getPosition().getHeight();
            float pad = 5f;

            TooltipMakerAPI info = panel.createUIElement(width, height, true);
            panel.addUIElement(info);
            info.setParaOrbitronLarge();
            info.addPara(d_i18n.get("recordConfirmInfo"), Misc.getNegativeHighlightColor(), 0f);
            info.addSpacer(30f);
            info.setAreaCheckboxFont(Fonts.ORBITRON_24AA);
            info.addPara(d_i18n.get("recordExtraCreditsTitle"), Misc.getHighlightColor(), 0f);
            info.addSpacer(pad);
            float buttonWidth = width / 3f - 10f;
            float buttonHeight = 30f;
            HorizontalButtonGroup buttonGroup = new HorizontalButtonGroup();
            btn_recordCargo = info.addAreaCheckbox(d_i18n.get("recordExtraCredits_cargo"), null, Misc.getBasePlayerColor(),
                                                   Misc.getDarkPlayerColor(), Misc.getBrightPlayerColor(), buttonWidth, buttonHeight, 0f);
            btn_recordShip = info.addAreaCheckbox(d_i18n.get("recordExtraCredits_ship"), null, Misc.getBasePlayerColor(),
                                                  Misc.getDarkPlayerColor(), Misc.getBrightPlayerColor(), buttonWidth, buttonHeight, 0f);
            btn_recordColony = info.addAreaCheckbox(d_i18n.get("recordExtraCredits_colony"), null, Misc.getBasePlayerColor(),
                                                    Misc.getDarkPlayerColor(), Misc.getBrightPlayerColor(), buttonWidth, buttonHeight, 0f);
            buttonGroup.addButton(btn_recordCargo);
            buttonGroup.addButton(btn_recordShip);
            buttonGroup.addButton(btn_recordColony);

            buttonGroup.updateTooltip(info, 10f);
        }

        @Override
        public boolean hasCancelButton() {
            return true;
        }

        @Override
        public String getConfirmText() {
            return null;
        }

        @Override
        public String getCancelText() {
            return null;
        }

        @Override
        public void customDialogConfirm() {
            float extraCredits = 0;
            boolean recordCargo = btn_recordCargo.isChecked();
            boolean recordShip = btn_recordShip.isChecked();
            boolean recordIndustry = btn_recordColony.isChecked();
            CargoAPI convertCargo = Global.getFactory().createCargo(true);
            for (MarketAPI market : Global.getSector().getEconomy().getMarketsCopy()) {
                if (Misc.playerHasStorageAccess(market)) {
                    CargoAPI storageCargo = Misc.getStorageCargo(market);
                    if (storageCargo != null) {
                        if (recordCargo) {
                            convertCargo.addAll(storageCargo);
                        }
                        if (recordShip) {
                            FleetDataAPI mothballedShips = storageCargo.getMothballedShips();
                            if (mothballedShips != null)
                                for (FleetMemberAPI member : mothballedShips.getMembersListCopy()) {
                                    extraCredits += member.getBaseValue();
                                }
                        }
                    }
                }
                if (recordIndustry) {
                    if (market.isPlayerOwned()) {
                        for (Industry industry : market.getIndustries()) {
                            extraCredits += industry.getBuildCost();
                        }
                    }
                }
            }
            CampaignFleetAPI playerFleet = Global.getSector().getPlayerFleet();
            CargoAPI playerCargo = playerFleet.getCargo();
            if (recordCargo) {
                convertCargo.addAll(playerCargo);
                for (CargoStackAPI stack : convertCargo.getStacksCopy()) {
                    extraCredits += stack.getBaseValuePerUnit() * stack.getSize();
                }
            }
            if (recordShip) {
                if (playerFleet.getFleetData() != null)
                    for (FleetMemberAPI member : playerFleet.getFleetData().getMembersListCopy()) {
                        extraCredits += member.getBaseValue();
                    }
            }
            textPanel.addPara(d_i18n.get("recordExtraCredits_success") + " %s ", Misc.getHighlightColor(), Misc.getDGSCredits(extraCredits));
            for (UNGP_DataSaverAPI dataSaver : pregenInheritData.dataSavers) {
                if (dataSaver instanceof UNGP_CreditsDataSaver) {
                    ((UNGP_CreditsDataSaver) dataSaver).credits += extraCredits;
                }
            }
            record(selectedOption);
        }

        @Override
        public void customDialogCancel() {
            optionSelected(null, OptionID.CHECK_RECORD_SLOTS);
        }

        @Override
        public CustomUIPanelPlugin getCustomPanelPlugin() {
            return null;
        }
    }

    /**
     * Used for inherit options
     *
     * @param <T>
     */
    private abstract static class InheritSettingEntry<T> implements UNGP_DataSaverSettingEntryAPI<T> {
        private SettingEntry<T> valueEntry;
        protected String entryTitle;
        protected Color entryTitleColor;
        protected Object[] optionValues;
        protected String[] optionNames;
        protected Color[] optionBaseColor;
        protected Color[] optionDarkColor;
        protected Color[] optionBrightColor;
        protected CheckBoxGroup checkBoxGroup;
        protected HorizontalButtonGroup optionGroup;

        public InheritSettingEntry(T defaultValue, int optionSize) {
            valueEntry = new SettingEntry<>(defaultValue);
            optionValues = new Object[optionSize];
            optionNames = new String[optionSize];
            optionBaseColor = new Color[optionSize];
            optionDarkColor = new Color[optionSize];
            optionBrightColor = new Color[optionSize];
            initParams(optionSize);
        }

        public abstract void initParams(int optionSize);

        public void addEntry(TooltipMakerAPI tooltip, float width) {
            checkBoxGroup = new CheckBoxGroup();
            optionGroup = new HorizontalButtonGroup();
            tooltip.addPara(entryTitle, entryTitleColor, 0f);
            tooltip.addSpacer(5f);
            int optionSize = optionValues.length;
            float buttonWidth = width / optionSize - 10f;
            {
                for (int i = 0; i < optionSize; i++) {
                    Object value = optionValues[i];
                    ButtonAPI checkBox = tooltip.addAreaCheckbox(optionNames[i], null, optionBaseColor[i],
                                                                 optionDarkColor[i], optionBrightColor[i],
                                                                 buttonWidth, 30f, 0f);
                    addTipToOption(tooltip, value);
                    optionGroup.addButton(checkBox);
                    checkBoxGroup.addCheckBox(checkBox, value);
                }
                optionGroup.updateTooltip(tooltip, 5f);
            }
            checkBoxGroup.tryCheckValue(valueEntry.get());
        }

        /**
         * Should only call {@link TooltipMakerAPI#addTooltipToPrevious(TooltipMakerAPI.TooltipCreator, TooltipMakerAPI.TooltipLocation)}
         *
         * @param tooltip
         * @param option
         */
        protected void addTipToOption(TooltipMakerAPI tooltip, Object option) {

        }

        public void reset() {
            cancelConfirm();
            valueEntry.reset();
        }

        public void advance(float amount) {
            if (checkBoxGroup != null)
                checkBoxGroup.updateCheck();
        }

        public T confirmValue() {
            T value = (T) checkBoxGroup.getCheckedValue();
            valueEntry.set(value);
            return value;
        }

        public void cancelConfirm() {
            checkBoxGroup = null;
            optionGroup = null;
        }

        @Override
        public T getValue() {
            return valueEntry.get();
        }
    }
}
